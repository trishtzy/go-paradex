// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponsesAPIError responses Api error
//
// swagger:model responses.ApiError
type ResponsesAPIError struct {

	// any additional data related to the error
	Data interface{} `json:"data,omitempty"`

	// unique immutable string identifier for specific error
	// Example: NOT_ONBOARDED
	Error struct {
		ResponsesErrorCode
	} `json:"error,omitempty"`

	// detailed description of error and how to address it
	// Example: User has never called /onboarding endpoint
	Message string `json:"message,omitempty"`
}

// Validate validates this responses Api error
func (m *ResponsesAPIError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesAPIError) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this responses Api error based on the context it is used
func (m *ResponsesAPIError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesAPIError) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ResponsesAPIError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsesAPIError) UnmarshalBinary(b []byte) error {
	var res ResponsesAPIError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
