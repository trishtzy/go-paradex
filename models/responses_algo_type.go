// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesAlgoType responses algo type
//
// swagger:model responses.AlgoType
type ResponsesAlgoType string

func NewResponsesAlgoType(value ResponsesAlgoType) *ResponsesAlgoType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesAlgoType.
func (m ResponsesAlgoType) Pointer() *ResponsesAlgoType {
	return &m
}

const (

	// ResponsesAlgoTypeEmpty captures enum value ""
	ResponsesAlgoTypeEmpty ResponsesAlgoType = ""

	// ResponsesAlgoTypeTWAP captures enum value "TWAP"
	ResponsesAlgoTypeTWAP ResponsesAlgoType = "TWAP"
)

// for schema
var responsesAlgoTypeEnum []interface{}

func init() {
	var res []ResponsesAlgoType
	if err := json.Unmarshal([]byte(`["","TWAP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesAlgoTypeEnum = append(responsesAlgoTypeEnum, v)
	}
}

func (m ResponsesAlgoType) validateResponsesAlgoTypeEnum(path, location string, value ResponsesAlgoType) error {
	if err := validate.EnumCase(path, location, value, responsesAlgoTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses algo type
func (m ResponsesAlgoType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesAlgoTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses algo type based on context it is used
func (m ResponsesAlgoType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
