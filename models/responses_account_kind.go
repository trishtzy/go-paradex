// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesAccountKind responses account kind
//
// swagger:model responses.AccountKind
type ResponsesAccountKind string

func NewResponsesAccountKind(value ResponsesAccountKind) *ResponsesAccountKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesAccountKind.
func (m ResponsesAccountKind) Pointer() *ResponsesAccountKind {
	return &m
}

const (

	// ResponsesAccountKindEmpty captures enum value ""
	ResponsesAccountKindEmpty ResponsesAccountKind = ""

	// ResponsesAccountKindMain captures enum value "main"
	ResponsesAccountKindMain ResponsesAccountKind = "main"

	// ResponsesAccountKindSubaccount captures enum value "subaccount"
	ResponsesAccountKindSubaccount ResponsesAccountKind = "subaccount"

	// ResponsesAccountKindVaultOperator captures enum value "vault_operator"
	ResponsesAccountKindVaultOperator ResponsesAccountKind = "vault_operator"

	// ResponsesAccountKindVaultSubOperator captures enum value "vault_sub_operator"
	ResponsesAccountKindVaultSubOperator ResponsesAccountKind = "vault_sub_operator"
)

// for schema
var responsesAccountKindEnum []interface{}

func init() {
	var res []ResponsesAccountKind
	if err := json.Unmarshal([]byte(`["","main","subaccount","vault_operator","vault_sub_operator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesAccountKindEnum = append(responsesAccountKindEnum, v)
	}
}

func (m ResponsesAccountKind) validateResponsesAccountKindEnum(path, location string, value ResponsesAccountKind) error {
	if err := validate.EnumCase(path, location, value, responsesAccountKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses account kind
func (m ResponsesAccountKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesAccountKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses account kind based on context it is used
func (m ResponsesAccountKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
