// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponsesVaultResp responses vault resp
//
// swagger:model responses.VaultResp
type ResponsesVaultResp struct {

	// Contract address of the vault
	// Example: 0x1234567890abcdef
	Address string `json:"address,omitempty"`

	// Unix timestamp in milliseconds of when the vault has been created
	// Example: 1517171717
	CreatedAt int64 `json:"created_at,omitempty"`

	// Description of the vault
	// Example: My description
	Description string `json:"description,omitempty"`

	// Kind of the vault: 'user' for user-defined vaults, 'protocol' for vaults controlled by Paradex
	// Example: user
	Kind struct {
		ResponsesVaultKind
	} `json:"kind,omitempty"`

	// Unix timestamp in milliseconds of when the vault was last updated
	// Example: 1617171717
	LastUpdatedAt int64 `json:"last_updated_at,omitempty"`

	// Lockup period of the vault in days
	// Example: 1
	LockupPeriod int64 `json:"lockup_period,omitempty"`

	// Maximum amount of assets the vault can hold in USDC
	// Example: 1000000
	MaxTvl int64 `json:"max_tvl,omitempty"`

	// Name of the vault
	// Example: MyVault
	Name string `json:"name,omitempty"`

	// Operator account of the vault
	// Example: 0x1234567890abcdef
	OperatorAccount string `json:"operator_account,omitempty"`

	// Owner account of the vault
	// Example: 0x0234567890abcdef
	OwnerAccount string `json:"owner_account,omitempty"`

	// Profit share of the vault in percentage, i.e. 10 means 10%
	// Example: 10
	ProfitShare int64 `json:"profit_share,omitempty"`

	// Status of the vault
	// Example: ACTIVE
	Status struct {
		ResponsesVaultStatus
	} `json:"status,omitempty"`

	// Strategies of the vault
	Strategies []*ResponsesStrategy `json:"strategies"`

	// LP token address
	TokenAddress string `json:"token_address,omitempty"`
}

// Validate validates this responses vault resp
func (m *ResponsesVaultResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesVaultResp) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	return nil
}

func (m *ResponsesVaultResp) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

func (m *ResponsesVaultResp) validateStrategies(formats strfmt.Registry) error {
	if swag.IsZero(m.Strategies) { // not required
		return nil
	}

	for i := 0; i < len(m.Strategies); i++ {
		if swag.IsZero(m.Strategies[i]) { // not required
			continue
		}

		if m.Strategies[i] != nil {
			if err := m.Strategies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this responses vault resp based on the context it is used
func (m *ResponsesVaultResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStrategies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesVaultResp) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ResponsesVaultResp) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ResponsesVaultResp) contextValidateStrategies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Strategies); i++ {

		if m.Strategies[i] != nil {

			if swag.IsZero(m.Strategies[i]) { // not required
				return nil
			}

			if err := m.Strategies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strategies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("strategies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponsesVaultResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsesVaultResp) UnmarshalBinary(b []byte) error {
	var res ResponsesVaultResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
