// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponsesMarketChainDetails responses market chain details
//
// swagger:model responses.MarketChainDetails
type ResponsesMarketChainDetails struct {

	// Collateral address
	// Example: 0x1234567890
	CollateralAddress string `json:"collateral_address,omitempty"`

	// Contract address
	// Example: 0x1234567890
	ContractAddress string `json:"contract_address,omitempty"`

	// Fee account address
	// Example: 0x1234567890
	FeeAccountAddress string `json:"fee_account_address,omitempty"`

	// Maker fee
	// Example: 0.01
	FeeMaker string `json:"fee_maker,omitempty"`

	// Taker fee
	// Example: 0.01
	FeeTaker string `json:"fee_taker,omitempty"`

	// Insurance fund address
	// Example: 0x1234567890
	InsuranceFundAddress string `json:"insurance_fund_address,omitempty"`

	// Liquidation fee
	// Example: 0.01
	LiquidationFee string `json:"liquidation_fee,omitempty"`

	// Oracle address
	// Example: 0x1234567890
	OracleAddress string `json:"oracle_address,omitempty"`

	// Market symbol
	// Example: ETH-USD-PERP
	Symbol string `json:"symbol,omitempty"`
}

// Validate validates this responses market chain details
func (m *ResponsesMarketChainDetails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this responses market chain details based on context it is used
func (m *ResponsesMarketChainDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponsesMarketChainDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsesMarketChainDetails) UnmarshalBinary(b []byte) error {
	var res ResponsesMarketChainDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
