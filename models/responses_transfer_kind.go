// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesTransferKind responses transfer kind
//
// swagger:model responses.TransferKind
type ResponsesTransferKind string

func NewResponsesTransferKind(value ResponsesTransferKind) *ResponsesTransferKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesTransferKind.
func (m ResponsesTransferKind) Pointer() *ResponsesTransferKind {
	return &m
}

const (

	// ResponsesTransferKindDEPOSIT captures enum value "DEPOSIT"
	ResponsesTransferKindDEPOSIT ResponsesTransferKind = "DEPOSIT"

	// ResponsesTransferKindWITHDRAWAL captures enum value "WITHDRAWAL"
	ResponsesTransferKindWITHDRAWAL ResponsesTransferKind = "WITHDRAWAL"

	// ResponsesTransferKindUNWINDING captures enum value "UNWINDING"
	ResponsesTransferKindUNWINDING ResponsesTransferKind = "UNWINDING"

	// ResponsesTransferKindVAULTDEPOSIT captures enum value "VAULT_DEPOSIT"
	ResponsesTransferKindVAULTDEPOSIT ResponsesTransferKind = "VAULT_DEPOSIT"

	// ResponsesTransferKindVAULTWITHDRAWAL captures enum value "VAULT_WITHDRAWAL"
	ResponsesTransferKindVAULTWITHDRAWAL ResponsesTransferKind = "VAULT_WITHDRAWAL"

	// ResponsesTransferKindAUTOWITHDRAWAL captures enum value "AUTO_WITHDRAWAL"
	ResponsesTransferKindAUTOWITHDRAWAL ResponsesTransferKind = "AUTO_WITHDRAWAL"
)

// for schema
var responsesTransferKindEnum []interface{}

func init() {
	var res []ResponsesTransferKind
	if err := json.Unmarshal([]byte(`["DEPOSIT","WITHDRAWAL","UNWINDING","VAULT_DEPOSIT","VAULT_WITHDRAWAL","AUTO_WITHDRAWAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesTransferKindEnum = append(responsesTransferKindEnum, v)
	}
}

func (m ResponsesTransferKind) validateResponsesTransferKindEnum(path, location string, value ResponsesTransferKind) error {
	if err := validate.EnumCase(path, location, value, responsesTransferKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses transfer kind
func (m ResponsesTransferKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesTransferKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses transfer kind based on context it is used
func (m ResponsesTransferKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
