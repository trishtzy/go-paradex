// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesVaultStatus responses vault status
//
// swagger:model responses.VaultStatus
type ResponsesVaultStatus string

func NewResponsesVaultStatus(value ResponsesVaultStatus) *ResponsesVaultStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesVaultStatus.
func (m ResponsesVaultStatus) Pointer() *ResponsesVaultStatus {
	return &m
}

const (

	// ResponsesVaultStatusINITIALIZING captures enum value "INITIALIZING"
	ResponsesVaultStatusINITIALIZING ResponsesVaultStatus = "INITIALIZING"

	// ResponsesVaultStatusACTIVE captures enum value "ACTIVE"
	ResponsesVaultStatusACTIVE ResponsesVaultStatus = "ACTIVE"

	// ResponsesVaultStatusCLOSED captures enum value "CLOSED"
	ResponsesVaultStatusCLOSED ResponsesVaultStatus = "CLOSED"

	// ResponsesVaultStatusFAILED captures enum value "FAILED"
	ResponsesVaultStatusFAILED ResponsesVaultStatus = "FAILED"
)

// for schema
var responsesVaultStatusEnum []interface{}

func init() {
	var res []ResponsesVaultStatus
	if err := json.Unmarshal([]byte(`["INITIALIZING","ACTIVE","CLOSED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesVaultStatusEnum = append(responsesVaultStatusEnum, v)
	}
}

func (m ResponsesVaultStatus) validateResponsesVaultStatusEnum(path, location string, value ResponsesVaultStatus) error {
	if err := validate.EnumCase(path, location, value, responsesVaultStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses vault status
func (m ResponsesVaultStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesVaultStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses vault status based on context it is used
func (m ResponsesVaultStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
