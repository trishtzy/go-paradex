// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesOrderFlag responses order flag
//
// swagger:model responses.OrderFlag
type ResponsesOrderFlag string

func NewResponsesOrderFlag(value ResponsesOrderFlag) *ResponsesOrderFlag {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesOrderFlag.
func (m ResponsesOrderFlag) Pointer() *ResponsesOrderFlag {
	return &m
}

const (

	// ResponsesOrderFlagREDUCEONLY captures enum value "REDUCE_ONLY"
	ResponsesOrderFlagREDUCEONLY ResponsesOrderFlag = "REDUCE_ONLY"

	// ResponsesOrderFlagSTOPCONDITIONBELOWTRIGGER captures enum value "STOP_CONDITION_BELOW_TRIGGER"
	ResponsesOrderFlagSTOPCONDITIONBELOWTRIGGER ResponsesOrderFlag = "STOP_CONDITION_BELOW_TRIGGER"

	// ResponsesOrderFlagSTOPCONDITIONABOVETRIGGER captures enum value "STOP_CONDITION_ABOVE_TRIGGER"
	ResponsesOrderFlagSTOPCONDITIONABOVETRIGGER ResponsesOrderFlag = "STOP_CONDITION_ABOVE_TRIGGER"
)

// for schema
var responsesOrderFlagEnum []interface{}

func init() {
	var res []ResponsesOrderFlag
	if err := json.Unmarshal([]byte(`["REDUCE_ONLY","STOP_CONDITION_BELOW_TRIGGER","STOP_CONDITION_ABOVE_TRIGGER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesOrderFlagEnum = append(responsesOrderFlagEnum, v)
	}
}

func (m ResponsesOrderFlag) validateResponsesOrderFlagEnum(path, location string, value ResponsesOrderFlag) error {
	if err := validate.EnumCase(path, location, value, responsesOrderFlagEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses order flag
func (m ResponsesOrderFlag) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesOrderFlagEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses order flag based on context it is used
func (m ResponsesOrderFlag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
