// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesOrderStatus responses order status
//
// swagger:model responses.OrderStatus
type ResponsesOrderStatus string

func NewResponsesOrderStatus(value ResponsesOrderStatus) *ResponsesOrderStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesOrderStatus.
func (m ResponsesOrderStatus) Pointer() *ResponsesOrderStatus {
	return &m
}

const (

	// ResponsesOrderStatusNEW captures enum value "NEW"
	ResponsesOrderStatusNEW ResponsesOrderStatus = "NEW"

	// ResponsesOrderStatusUNTRIGGERED captures enum value "UNTRIGGERED"
	ResponsesOrderStatusUNTRIGGERED ResponsesOrderStatus = "UNTRIGGERED"

	// ResponsesOrderStatusOPEN captures enum value "OPEN"
	ResponsesOrderStatusOPEN ResponsesOrderStatus = "OPEN"

	// ResponsesOrderStatusCLOSED captures enum value "CLOSED"
	ResponsesOrderStatusCLOSED ResponsesOrderStatus = "CLOSED"
)

// for schema
var responsesOrderStatusEnum []interface{}

func init() {
	var res []ResponsesOrderStatus
	if err := json.Unmarshal([]byte(`["NEW","UNTRIGGERED","OPEN","CLOSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesOrderStatusEnum = append(responsesOrderStatusEnum, v)
	}
}

func (m ResponsesOrderStatus) validateResponsesOrderStatusEnum(path, location string, value ResponsesOrderStatus) error {
	if err := validate.EnumCase(path, location, value, responsesOrderStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses order status
func (m ResponsesOrderStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesOrderStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses order status based on context it is used
func (m ResponsesOrderStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
