// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesOrderSide responses order side
//
// swagger:model responses.OrderSide
type ResponsesOrderSide string

func NewResponsesOrderSide(value ResponsesOrderSide) *ResponsesOrderSide {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesOrderSide.
func (m ResponsesOrderSide) Pointer() *ResponsesOrderSide {
	return &m
}

const (

	// ResponsesOrderSideBUY captures enum value "BUY"
	ResponsesOrderSideBUY ResponsesOrderSide = "BUY"

	// ResponsesOrderSideSELL captures enum value "SELL"
	ResponsesOrderSideSELL ResponsesOrderSide = "SELL"
)

// for schema
var responsesOrderSideEnum []interface{}

func init() {
	var res []ResponsesOrderSide
	if err := json.Unmarshal([]byte(`["BUY","SELL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesOrderSideEnum = append(responsesOrderSideEnum, v)
	}
}

func (m ResponsesOrderSide) validateResponsesOrderSideEnum(path, location string, value ResponsesOrderSide) error {
	if err := validate.EnumCase(path, location, value, responsesOrderSideEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses order side
func (m ResponsesOrderSide) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesOrderSideEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses order side based on context it is used
func (m ResponsesOrderSide) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
