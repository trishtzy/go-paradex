// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponsesVaultsConfigResponse responses vaults config response
//
// swagger:model responses.VaultsConfigResponse
type ResponsesVaultsConfigResponse struct {

	// Maximum lockup period in days an owner can configure for a vault
	// Example: 4
	MaxLockupPeriodDays string `json:"max_lockup_period_days,omitempty"`

	// Maximum profit share percentage (0-100) an owner can configure for a vault
	// Example: 50
	MaxProfitSharePercentage string `json:"max_profit_share_percentage,omitempty"`

	// Minimum initial collateral deposit (in currency units) at vault creation. Only applies to the owner
	// Example: 1000
	MinInitialDeposit string `json:"min_initial_deposit,omitempty"`

	// Minimum lockup period in days an owner can configure for a vault
	// Example: 1
	MinLockupPeriodDays string `json:"min_lockup_period_days,omitempty"`

	// Minimum share percentage (0-100) the vault owner must maintain on the vault
	// Example: 5
	MinOwnerSharePercentage string `json:"min_owner_share_percentage,omitempty"`

	// Address of the vault factory contract
	// Example: 0x1234567890abcdef
	VaultFactoryAddress string `json:"vault_factory_address,omitempty"`
}

// Validate validates this responses vaults config response
func (m *ResponsesVaultsConfigResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this responses vaults config response based on context it is used
func (m *ResponsesVaultsConfigResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponsesVaultsConfigResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsesVaultsConfigResponse) UnmarshalBinary(b []byte) error {
	var res ResponsesVaultsConfigResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
