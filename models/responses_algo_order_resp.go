// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponsesAlgoOrderResp responses algo order resp
//
// swagger:model responses.AlgoOrderResp
type ResponsesAlgoOrderResp struct {

	// Account identifier (user's account address)
	// Example: 0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512
	Account string `json:"account,omitempty"`

	// Algo type
	// Example: TWAP
	AlgoType struct {
		ResponsesAlgoType
	} `json:"algo_type,omitempty"`

	// Average fill price of the order
	// Example: 26000
	AvgFillPrice string `json:"avg_fill_price,omitempty"`

	// Reason for algo cancellation if it was closed by cancel
	// Example: NOT_ENOUGH_MARGIN
	CancelReason string `json:"cancel_reason,omitempty"`

	// Algo creation time
	// Example: 1681493746016
	CreatedAt int64 `json:"created_at,omitempty"`

	// Algo end time
	// Example: 1681493746016
	EndAt int64 `json:"end_at,omitempty"`

	// Unique algo identifier
	// Example: 123456
	ID string `json:"id,omitempty"`

	// Algo last update time.  No changes once status=CLOSED
	// Example: 1681493746016
	LastUpdatedAt int64 `json:"last_updated_at,omitempty"`

	// Market to which algo belongs
	// Example: BTC-USD-PERP
	Market string `json:"market,omitempty"`

	// Remaining size of the algo
	// Example: 0
	RemainingSize string `json:"remaining_size,omitempty"`

	// Algo side
	Side struct {
		ResponsesOrderSide
	} `json:"side,omitempty"`

	// Algo size
	// Example: 0.05
	Size string `json:"size,omitempty"`

	// Algo status
	Status struct {
		ResponsesOrderStatus
	} `json:"status,omitempty"`
}

// Validate validates this responses algo order resp
func (m *ResponsesAlgoOrderResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgoType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSide(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesAlgoOrderResp) validateAlgoType(formats strfmt.Registry) error {
	if swag.IsZero(m.AlgoType) { // not required
		return nil
	}

	return nil
}

func (m *ResponsesAlgoOrderResp) validateSide(formats strfmt.Registry) error {
	if swag.IsZero(m.Side) { // not required
		return nil
	}

	return nil
}

func (m *ResponsesAlgoOrderResp) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this responses algo order resp based on the context it is used
func (m *ResponsesAlgoOrderResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlgoType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSide(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesAlgoOrderResp) contextValidateAlgoType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ResponsesAlgoOrderResp) contextValidateSide(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ResponsesAlgoOrderResp) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ResponsesAlgoOrderResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsesAlgoOrderResp) UnmarshalBinary(b []byte) error {
	var res ResponsesAlgoOrderResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
