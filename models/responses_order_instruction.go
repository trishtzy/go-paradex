// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesOrderInstruction responses order instruction
//
// swagger:model responses.OrderInstruction
type ResponsesOrderInstruction string

func NewResponsesOrderInstruction(value ResponsesOrderInstruction) *ResponsesOrderInstruction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesOrderInstruction.
func (m ResponsesOrderInstruction) Pointer() *ResponsesOrderInstruction {
	return &m
}

const (

	// ResponsesOrderInstructionGTC captures enum value "GTC"
	ResponsesOrderInstructionGTC ResponsesOrderInstruction = "GTC"

	// ResponsesOrderInstructionPOSTONLY captures enum value "POST_ONLY"
	ResponsesOrderInstructionPOSTONLY ResponsesOrderInstruction = "POST_ONLY"

	// ResponsesOrderInstructionIOC captures enum value "IOC"
	ResponsesOrderInstructionIOC ResponsesOrderInstruction = "IOC"
)

// for schema
var responsesOrderInstructionEnum []interface{}

func init() {
	var res []ResponsesOrderInstruction
	if err := json.Unmarshal([]byte(`["GTC","POST_ONLY","IOC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesOrderInstructionEnum = append(responsesOrderInstructionEnum, v)
	}
}

func (m ResponsesOrderInstruction) validateResponsesOrderInstructionEnum(path, location string, value ResponsesOrderInstruction) error {
	if err := validate.EnumCase(path, location, value, responsesOrderInstructionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses order instruction
func (m ResponsesOrderInstruction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesOrderInstructionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses order instruction based on context it is used
func (m ResponsesOrderInstruction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
