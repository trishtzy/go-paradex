// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesTransferDirection responses transfer direction
//
// swagger:model responses.TransferDirection
type ResponsesTransferDirection string

func NewResponsesTransferDirection(value ResponsesTransferDirection) *ResponsesTransferDirection {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesTransferDirection.
func (m ResponsesTransferDirection) Pointer() *ResponsesTransferDirection {
	return &m
}

const (

	// ResponsesTransferDirectionIN captures enum value "IN"
	ResponsesTransferDirectionIN ResponsesTransferDirection = "IN"

	// ResponsesTransferDirectionOUT captures enum value "OUT"
	ResponsesTransferDirectionOUT ResponsesTransferDirection = "OUT"
)

// for schema
var responsesTransferDirectionEnum []interface{}

func init() {
	var res []ResponsesTransferDirection
	if err := json.Unmarshal([]byte(`["IN","OUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesTransferDirectionEnum = append(responsesTransferDirectionEnum, v)
	}
}

func (m ResponsesTransferDirection) validateResponsesTransferDirectionEnum(path, location string, value ResponsesTransferDirection) error {
	if err := validate.EnumCase(path, location, value, responsesTransferDirectionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses transfer direction
func (m ResponsesTransferDirection) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesTransferDirectionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses transfer direction based on context it is used
func (m ResponsesTransferDirection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
