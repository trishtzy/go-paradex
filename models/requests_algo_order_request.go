// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestsAlgoOrderRequest requests algo order request
//
// swagger:model requests.AlgoOrderRequest
type RequestsAlgoOrderRequest struct {

	// Algo type, required for algo orders creation
	// Example: TWAP
	// Required: true
	AlgoType *string `json:"algo_type"`

	// Duration in seconds for which the algo order will be running, required for algo orders creation
	// Example: 3600
	// Required: true
	DurationSeconds *int64 `json:"duration_seconds"`

	// Market for which order is created
	// Example: BTC-USD-PERP
	// Required: true
	Market *string `json:"market"`

	// Algo order side
	// Example: MARKET
	// Required: true
	Side struct {
		ResponsesOrderSide
	} `json:"side"`

	// Order Payload signed with STARK Private Key
	// Required: true
	Signature *string `json:"signature"`

	// Timestamp of order creation, used for signature verification
	// Required: true
	SignatureTimestamp *int64 `json:"signature_timestamp"`

	// Size of the algo order
	// Example: 1.213
	// Required: true
	Size *string `json:"size"`

	// Algo order type, only MARKET is supported
	// Required: true
	Type struct {
		ResponsesOrderType
	} `json:"type"`
}

// Validate validates this requests algo order request
func (m *RequestsAlgoOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgoType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSide(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestsAlgoOrderRequest) validateAlgoType(formats strfmt.Registry) error {

	if err := validate.Required("algo_type", "body", m.AlgoType); err != nil {
		return err
	}

	return nil
}

func (m *RequestsAlgoOrderRequest) validateDurationSeconds(formats strfmt.Registry) error {

	if err := validate.Required("duration_seconds", "body", m.DurationSeconds); err != nil {
		return err
	}

	return nil
}

func (m *RequestsAlgoOrderRequest) validateMarket(formats strfmt.Registry) error {

	if err := validate.Required("market", "body", m.Market); err != nil {
		return err
	}

	return nil
}

func (m *RequestsAlgoOrderRequest) validateSide(formats strfmt.Registry) error {

	return nil
}

func (m *RequestsAlgoOrderRequest) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

func (m *RequestsAlgoOrderRequest) validateSignatureTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("signature_timestamp", "body", m.SignatureTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RequestsAlgoOrderRequest) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *RequestsAlgoOrderRequest) validateType(formats strfmt.Registry) error {

	return nil
}

// ContextValidate validate this requests algo order request based on the context it is used
func (m *RequestsAlgoOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSide(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestsAlgoOrderRequest) contextValidateSide(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RequestsAlgoOrderRequest) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *RequestsAlgoOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestsAlgoOrderRequest) UnmarshalBinary(b []byte) error {
	var res RequestsAlgoOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
