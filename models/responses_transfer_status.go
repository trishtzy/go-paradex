// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesTransferStatus responses transfer status
//
// swagger:model responses.TransferStatus
type ResponsesTransferStatus string

func NewResponsesTransferStatus(value ResponsesTransferStatus) *ResponsesTransferStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesTransferStatus.
func (m ResponsesTransferStatus) Pointer() *ResponsesTransferStatus {
	return &m
}

const (

	// ResponsesTransferStatusPENDING captures enum value "PENDING"
	ResponsesTransferStatusPENDING ResponsesTransferStatus = "PENDING"

	// ResponsesTransferStatusAVAILABLE captures enum value "AVAILABLE"
	ResponsesTransferStatusAVAILABLE ResponsesTransferStatus = "AVAILABLE"

	// ResponsesTransferStatusCOMPLETED captures enum value "COMPLETED"
	ResponsesTransferStatusCOMPLETED ResponsesTransferStatus = "COMPLETED"

	// ResponsesTransferStatusFAILED captures enum value "FAILED"
	ResponsesTransferStatusFAILED ResponsesTransferStatus = "FAILED"
)

// for schema
var responsesTransferStatusEnum []interface{}

func init() {
	var res []ResponsesTransferStatus
	if err := json.Unmarshal([]byte(`["PENDING","AVAILABLE","COMPLETED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesTransferStatusEnum = append(responsesTransferStatusEnum, v)
	}
}

func (m ResponsesTransferStatus) validateResponsesTransferStatusEnum(path, location string, value ResponsesTransferStatus) error {
	if err := validate.EnumCase(path, location, value, responsesTransferStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses transfer status
func (m ResponsesTransferStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesTransferStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses transfer status based on context it is used
func (m ResponsesTransferStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
