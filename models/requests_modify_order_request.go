// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestsModifyOrderRequest requests modify order request
//
// swagger:model requests.ModifyOrderRequest
type RequestsModifyOrderRequest struct {

	// Order ID to be modified
	// Required: true
	ID *string `json:"id"`

	// Market for which order is modified
	// Example: BTC-USD-PERP
	// Required: true
	Market *string `json:"market"`

	// Existing or modified price of the order
	// Example: 29500.12
	// Required: true
	Price *string `json:"price"`

	// Existing side of the order
	// Example: BUY
	// Required: true
	Side *string `json:"side"`

	// Order Payload signed with STARK Private Key
	// Required: true
	Signature *string `json:"signature"`

	// Timestamp of order creation, used for signature verification
	// Required: true
	SignatureTimestamp *int64 `json:"signature_timestamp"`

	// Existing or modified size of the order
	// Example: 1.213
	// Required: true
	Size *string `json:"size"`

	// Existing type of the order
	// Example: LIMIT
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this requests modify order request
func (m *RequestsModifyOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSide(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestsModifyOrderRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RequestsModifyOrderRequest) validateMarket(formats strfmt.Registry) error {

	if err := validate.Required("market", "body", m.Market); err != nil {
		return err
	}

	return nil
}

func (m *RequestsModifyOrderRequest) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *RequestsModifyOrderRequest) validateSide(formats strfmt.Registry) error {

	if err := validate.Required("side", "body", m.Side); err != nil {
		return err
	}

	return nil
}

func (m *RequestsModifyOrderRequest) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

func (m *RequestsModifyOrderRequest) validateSignatureTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("signature_timestamp", "body", m.SignatureTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RequestsModifyOrderRequest) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *RequestsModifyOrderRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this requests modify order request based on context it is used
func (m *RequestsModifyOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestsModifyOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestsModifyOrderRequest) UnmarshalBinary(b []byte) error {
	var res RequestsModifyOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
