// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponsesSTPMode responses s t p mode
//
// swagger:model responses.STPMode
type ResponsesSTPMode string

func NewResponsesSTPMode(value ResponsesSTPMode) *ResponsesSTPMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResponsesSTPMode.
func (m ResponsesSTPMode) Pointer() *ResponsesSTPMode {
	return &m
}

const (

	// ResponsesSTPModeEXPIREMAKER captures enum value "EXPIRE_MAKER"
	ResponsesSTPModeEXPIREMAKER ResponsesSTPMode = "EXPIRE_MAKER"

	// ResponsesSTPModeEXPIRETAKER captures enum value "EXPIRE_TAKER"
	ResponsesSTPModeEXPIRETAKER ResponsesSTPMode = "EXPIRE_TAKER"

	// ResponsesSTPModeEXPIREBOTH captures enum value "EXPIRE_BOTH"
	ResponsesSTPModeEXPIREBOTH ResponsesSTPMode = "EXPIRE_BOTH"
)

// for schema
var responsesSTPModeEnum []interface{}

func init() {
	var res []ResponsesSTPMode
	if err := json.Unmarshal([]byte(`["EXPIRE_MAKER","EXPIRE_TAKER","EXPIRE_BOTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responsesSTPModeEnum = append(responsesSTPModeEnum, v)
	}
}

func (m ResponsesSTPMode) validateResponsesSTPModeEnum(path, location string, value ResponsesSTPMode) error {
	if err := validate.EnumCase(path, location, value, responsesSTPModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this responses s t p mode
func (m ResponsesSTPMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResponsesSTPModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this responses s t p mode based on context it is used
func (m ResponsesSTPMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
