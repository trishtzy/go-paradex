// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponsesTradeResult responses trade result
//
// swagger:model responses.TradeResult
type ResponsesTradeResult struct {

	// Unix Millisecond timestamp at which trade was done
	// Example: 1681497002041
	CreatedAt int64 `json:"created_at,omitempty"`

	// Unique Trade ID per TradeType
	// Example: 12345643
	ID string `json:"id,omitempty"`

	// Market for which trade was done
	// Example: BTC-USD-PERP
	Market string `json:"market,omitempty"`

	// Trade price
	// Example: 30001.2
	Price string `json:"price,omitempty"`

	// Taker side
	Side struct {
		ResponsesOrderSide
	} `json:"side,omitempty"`

	// Trade size
	// Example: 0.01
	Size string `json:"size,omitempty"`

	// Trade type, can be FILL or LIQUIDATION
	// Example: FILL
	TradeType string `json:"trade_type,omitempty"`
}

// Validate validates this responses trade result
func (m *ResponsesTradeResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSide(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesTradeResult) validateSide(formats strfmt.Registry) error {
	if swag.IsZero(m.Side) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this responses trade result based on the context it is used
func (m *ResponsesTradeResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSide(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsesTradeResult) contextValidateSide(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ResponsesTradeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsesTradeResult) UnmarshalBinary(b []byte) error {
	var res ResponsesTradeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
