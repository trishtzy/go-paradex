// Code generated by go-swagger; DO NOT EDIT.

package markets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new markets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new markets API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new markets API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for markets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBbo(params *GetBboParams, opts ...ClientOption) (*GetBboOK, error)

	GetFundingData(params *GetFundingDataParams, opts ...ClientOption) (*GetFundingDataOK, error)

	GetMarkets(params *GetMarketsParams, opts ...ClientOption) (*GetMarketsOK, error)

	GetMarketsSummary(params *GetMarketsSummaryParams, opts ...ClientOption) (*GetMarketsSummaryOK, error)

	GetOrderbook(params *GetOrderbookParams, opts ...ClientOption) (*GetOrderbookOK, error)

	MarketsKlines(params *MarketsKlinesParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
GetBbo gets market bbo

Get the best bid/ask for the given market
*/
func (a *Client) GetBbo(params *GetBboParams, opts ...ClientOption) (*GetBboOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBboParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-bbo",
		Method:             "GET",
		PathPattern:        "/bbo/{market}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBboReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBboOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-bbo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFundingData fundings data history

List historical funding data by market
*/
func (a *Client) GetFundingData(params *GetFundingDataParams, opts ...ClientOption) (*GetFundingDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFundingDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-funding-data",
		Method:             "GET",
		PathPattern:        "/funding/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFundingDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFundingDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-funding-data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMarkets lists available markets

Get markets static data component
*/
func (a *Client) GetMarkets(params *GetMarketsParams, opts ...ClientOption) (*GetMarketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-markets",
		Method:             "GET",
		PathPattern:        "/markets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMarketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-markets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMarketsSummary lists available markets summary

Get markets dynamic data component
*/
func (a *Client) GetMarketsSummary(params *GetMarketsSummaryParams, opts ...ClientOption) (*GetMarketsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-markets-summary",
		Method:             "GET",
		PathPattern:        "/markets/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMarketsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-markets-summary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrderbook gets market orderbook

Get snapshot of the orderbook for the given market
*/
func (a *Client) GetOrderbook(params *GetOrderbookParams, opts ...ClientOption) (*GetOrderbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderbookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-orderbook",
		Method:             "GET",
		PathPattern:        "/orderbook/{market}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrderbookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrderbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-orderbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MarketsKlines os h l c v for a symbol

Klines for a symbol
*/
func (a *Client) MarketsKlines(params *MarketsKlinesParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarketsKlinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "markets-klines",
		Method:             "GET",
		PathPattern:        "/markets/klines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarketsKlinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
