// Code generated by go-swagger; DO NOT EDIT.

package markets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetMarketsParams creates a new GetMarketsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMarketsParams() *GetMarketsParams {
	return &GetMarketsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMarketsParamsWithTimeout creates a new GetMarketsParams object
// with the ability to set a timeout on a request.
func NewGetMarketsParamsWithTimeout(timeout time.Duration) *GetMarketsParams {
	return &GetMarketsParams{
		timeout: timeout,
	}
}

// NewGetMarketsParamsWithContext creates a new GetMarketsParams object
// with the ability to set a context for a request.
func NewGetMarketsParamsWithContext(ctx context.Context) *GetMarketsParams {
	return &GetMarketsParams{
		Context: ctx,
	}
}

// NewGetMarketsParamsWithHTTPClient creates a new GetMarketsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMarketsParamsWithHTTPClient(client *http.Client) *GetMarketsParams {
	return &GetMarketsParams{
		HTTPClient: client,
	}
}

/*
GetMarketsParams contains all the parameters to send to the API endpoint

	for the get markets operation.

	Typically these are written to a http.Request.
*/
type GetMarketsParams struct {

	/* Market.

	   Market Name - example: BTC-USD-PERP
	*/
	Market *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get markets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMarketsParams) WithDefaults() *GetMarketsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get markets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMarketsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get markets params
func (o *GetMarketsParams) WithTimeout(timeout time.Duration) *GetMarketsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get markets params
func (o *GetMarketsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get markets params
func (o *GetMarketsParams) WithContext(ctx context.Context) *GetMarketsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get markets params
func (o *GetMarketsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get markets params
func (o *GetMarketsParams) WithHTTPClient(client *http.Client) *GetMarketsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get markets params
func (o *GetMarketsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMarket adds the market to the get markets params
func (o *GetMarketsParams) WithMarket(market *string) *GetMarketsParams {
	o.SetMarket(market)
	return o
}

// SetMarket adds the market to the get markets params
func (o *GetMarketsParams) SetMarket(market *string) {
	o.Market = market
}

// WriteToRequest writes these params to a swagger request
func (o *GetMarketsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Market != nil {

		// query param market
		var qrMarket string

		if o.Market != nil {
			qrMarket = *o.Market
		}
		qMarket := qrMarket
		if qMarket != "" {

			if err := r.SetQueryParam("market", qMarket); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
