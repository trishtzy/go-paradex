// Code generated by go-swagger; DO NOT EDIT.

package markets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMarketsKlinesParams creates a new MarketsKlinesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMarketsKlinesParams() *MarketsKlinesParams {
	return &MarketsKlinesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMarketsKlinesParamsWithTimeout creates a new MarketsKlinesParams object
// with the ability to set a timeout on a request.
func NewMarketsKlinesParamsWithTimeout(timeout time.Duration) *MarketsKlinesParams {
	return &MarketsKlinesParams{
		timeout: timeout,
	}
}

// NewMarketsKlinesParamsWithContext creates a new MarketsKlinesParams object
// with the ability to set a context for a request.
func NewMarketsKlinesParamsWithContext(ctx context.Context) *MarketsKlinesParams {
	return &MarketsKlinesParams{
		Context: ctx,
	}
}

// NewMarketsKlinesParamsWithHTTPClient creates a new MarketsKlinesParams object
// with the ability to set a custom HTTPClient for a request.
func NewMarketsKlinesParamsWithHTTPClient(client *http.Client) *MarketsKlinesParams {
	return &MarketsKlinesParams{
		HTTPClient: client,
	}
}

/*
MarketsKlinesParams contains all the parameters to send to the API endpoint

	for the markets klines operation.

	Typically these are written to a http.Request.
*/
type MarketsKlinesParams struct {

	/* EndAt.

	   end time for klines in milliseconds
	*/
	EndAt int64

	// PriceKind.
	PriceKind *string

	/* Resolution.

	   resolution in minutes: 1, 3, 5, 15, 30, 60
	*/
	Resolution string

	/* StartAt.

	   start time for klines in milliseconds
	*/
	StartAt int64

	/* Symbol.

	   Symbol of the market pair
	*/
	Symbol string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the markets klines params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MarketsKlinesParams) WithDefaults() *MarketsKlinesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the markets klines params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MarketsKlinesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the markets klines params
func (o *MarketsKlinesParams) WithTimeout(timeout time.Duration) *MarketsKlinesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the markets klines params
func (o *MarketsKlinesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the markets klines params
func (o *MarketsKlinesParams) WithContext(ctx context.Context) *MarketsKlinesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the markets klines params
func (o *MarketsKlinesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the markets klines params
func (o *MarketsKlinesParams) WithHTTPClient(client *http.Client) *MarketsKlinesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the markets klines params
func (o *MarketsKlinesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndAt adds the endAt to the markets klines params
func (o *MarketsKlinesParams) WithEndAt(endAt int64) *MarketsKlinesParams {
	o.SetEndAt(endAt)
	return o
}

// SetEndAt adds the endAt to the markets klines params
func (o *MarketsKlinesParams) SetEndAt(endAt int64) {
	o.EndAt = endAt
}

// WithPriceKind adds the priceKind to the markets klines params
func (o *MarketsKlinesParams) WithPriceKind(priceKind *string) *MarketsKlinesParams {
	o.SetPriceKind(priceKind)
	return o
}

// SetPriceKind adds the priceKind to the markets klines params
func (o *MarketsKlinesParams) SetPriceKind(priceKind *string) {
	o.PriceKind = priceKind
}

// WithResolution adds the resolution to the markets klines params
func (o *MarketsKlinesParams) WithResolution(resolution string) *MarketsKlinesParams {
	o.SetResolution(resolution)
	return o
}

// SetResolution adds the resolution to the markets klines params
func (o *MarketsKlinesParams) SetResolution(resolution string) {
	o.Resolution = resolution
}

// WithStartAt adds the startAt to the markets klines params
func (o *MarketsKlinesParams) WithStartAt(startAt int64) *MarketsKlinesParams {
	o.SetStartAt(startAt)
	return o
}

// SetStartAt adds the startAt to the markets klines params
func (o *MarketsKlinesParams) SetStartAt(startAt int64) {
	o.StartAt = startAt
}

// WithSymbol adds the symbol to the markets klines params
func (o *MarketsKlinesParams) WithSymbol(symbol string) *MarketsKlinesParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the markets klines params
func (o *MarketsKlinesParams) SetSymbol(symbol string) {
	o.Symbol = symbol
}

// WriteToRequest writes these params to a swagger request
func (o *MarketsKlinesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param end_at
	qrEndAt := o.EndAt
	qEndAt := swag.FormatInt64(qrEndAt)
	if qEndAt != "" {

		if err := r.SetQueryParam("end_at", qEndAt); err != nil {
			return err
		}
	}

	if o.PriceKind != nil {

		// query param price_kind
		var qrPriceKind string

		if o.PriceKind != nil {
			qrPriceKind = *o.PriceKind
		}
		qPriceKind := qrPriceKind
		if qPriceKind != "" {

			if err := r.SetQueryParam("price_kind", qPriceKind); err != nil {
				return err
			}
		}
	}

	// query param resolution
	qrResolution := o.Resolution
	qResolution := qrResolution
	if qResolution != "" {

		if err := r.SetQueryParam("resolution", qResolution); err != nil {
			return err
		}
	}

	// query param start_at
	qrStartAt := o.StartAt
	qStartAt := swag.FormatInt64(qrStartAt)
	if qStartAt != "" {

		if err := r.SetQueryParam("start_at", qStartAt); err != nil {
			return err
		}
	}

	// query param symbol
	qrSymbol := o.Symbol
	qSymbol := qrSymbol
	if qSymbol != "" {

		if err := r.SetQueryParam("symbol", qSymbol); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
