// Code generated by go-swagger; DO NOT EDIT.

package vaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new vaults API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new vaults API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new vaults API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for vaults API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	VaultsCreate(params *VaultsCreateParams, opts ...ClientOption) (*VaultsCreateCreated, error)

	VaultsGet(params *VaultsGetParams, opts ...ClientOption) (*VaultsGetOK, error)

	VaultsGetAccountSummary(params *VaultsGetAccountSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VaultsGetAccountSummaryOK, error)

	VaultsGetBalance(params *VaultsGetBalanceParams, opts ...ClientOption) (*VaultsGetBalanceOK, error)

	VaultsGetConfig(params *VaultsGetConfigParams, opts ...ClientOption) (*VaultsGetConfigOK, error)

	VaultsGetHistoricalData(params *VaultsGetHistoricalDataParams, opts ...ClientOption) (*VaultsGetHistoricalDataOK, error)

	VaultsGetPositions(params *VaultsGetPositionsParams, opts ...ClientOption) (*VaultsGetPositionsOK, error)

	VaultsGetSummary(params *VaultsGetSummaryParams, opts ...ClientOption) (*VaultsGetSummaryOK, error)

	VaultsGetTransfers(params *VaultsGetTransfersParams, opts ...ClientOption) (*VaultsGetTransfersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	VaultsCreate creates vault

	Create a new vault by providing deployment parameters.Current user will

be set as owner of the account and a new sub-account will be deployed as
vault operator.
*/
func (a *Client) VaultsCreate(params *VaultsCreateParams, opts ...ClientOption) (*VaultsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-create",
		Method:             "POST",
		PathPattern:        "/vaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VaultsGet gets vaults

Get list of available vaults.
*/
func (a *Client) VaultsGet(params *VaultsGetParams, opts ...ClientOption) (*VaultsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get",
		Method:             "GET",
		PathPattern:        "/vaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	VaultsGetAccountSummary gets vault account summary

	Get current user summary metrics for all vaults or for the single vault

specified by address. User metrics are only returned if the current user
is a depositor for the vault.
*/
func (a *Client) VaultsGetAccountSummary(params *VaultsGetAccountSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VaultsGetAccountSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetAccountSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get-account-summary",
		Method:             "GET",
		PathPattern:        "/vaults/account-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetAccountSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetAccountSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get-account-summary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VaultsGetBalance gets vault balances

Get spot balance of a vault
*/
func (a *Client) VaultsGetBalance(params *VaultsGetBalanceParams, opts ...ClientOption) (*VaultsGetBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get-balance",
		Method:             "GET",
		PathPattern:        "/vaults/balance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get-balance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VaultsGetConfig gets vaults config

Get vaults global configuration.
*/
func (a *Client) VaultsGetConfig(params *VaultsGetConfigParams, opts ...ClientOption) (*VaultsGetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get-config",
		Method:             "GET",
		PathPattern:        "/vaults/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get-config: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VaultsGetHistoricalData gets vault historical data

Get PnL and Account value historical timeseries for the given vault.
*/
func (a *Client) VaultsGetHistoricalData(params *VaultsGetHistoricalDataParams, opts ...ClientOption) (*VaultsGetHistoricalDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetHistoricalDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get-historical-data",
		Method:             "GET",
		PathPattern:        "/vaults/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetHistoricalDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetHistoricalDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get-historical-data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VaultsGetPositions gets vault positions

Get positions opened by the given vault.
*/
func (a *Client) VaultsGetPositions(params *VaultsGetPositionsParams, opts ...ClientOption) (*VaultsGetPositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetPositionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get-positions",
		Method:             "GET",
		PathPattern:        "/vaults/positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetPositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetPositionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get-positions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VaultsGetSummary gets vault summary

Get vaults summary metrics for all vaults or for the single vault specified by address.
*/
func (a *Client) VaultsGetSummary(params *VaultsGetSummaryParams, opts ...ClientOption) (*VaultsGetSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get-summary",
		Method:             "GET",
		PathPattern:        "/vaults/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get-summary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VaultsGetTransfers gets vault transfers

Get deposits and withdrawals related to the given vault.
*/
func (a *Client) VaultsGetTransfers(params *VaultsGetTransfersParams, opts ...ClientOption) (*VaultsGetTransfersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVaultsGetTransfersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vaults-get-transfers",
		Method:             "GET",
		PathPattern:        "/vaults/transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VaultsGetTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VaultsGetTransfersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vaults-get-transfers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
