// Code generated by go-swagger; DO NOT EDIT.

package vaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewVaultsGetHistoricalDataParams creates a new VaultsGetHistoricalDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVaultsGetHistoricalDataParams() *VaultsGetHistoricalDataParams {
	return &VaultsGetHistoricalDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVaultsGetHistoricalDataParamsWithTimeout creates a new VaultsGetHistoricalDataParams object
// with the ability to set a timeout on a request.
func NewVaultsGetHistoricalDataParamsWithTimeout(timeout time.Duration) *VaultsGetHistoricalDataParams {
	return &VaultsGetHistoricalDataParams{
		timeout: timeout,
	}
}

// NewVaultsGetHistoricalDataParamsWithContext creates a new VaultsGetHistoricalDataParams object
// with the ability to set a context for a request.
func NewVaultsGetHistoricalDataParamsWithContext(ctx context.Context) *VaultsGetHistoricalDataParams {
	return &VaultsGetHistoricalDataParams{
		Context: ctx,
	}
}

// NewVaultsGetHistoricalDataParamsWithHTTPClient creates a new VaultsGetHistoricalDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewVaultsGetHistoricalDataParamsWithHTTPClient(client *http.Client) *VaultsGetHistoricalDataParams {
	return &VaultsGetHistoricalDataParams{
		HTTPClient: client,
	}
}

/*
VaultsGetHistoricalDataParams contains all the parameters to send to the API endpoint

	for the vaults get historical data operation.

	Typically these are written to a http.Request.
*/
type VaultsGetHistoricalDataParams struct {

	/* Address.

	   Vault Address
	*/
	Address string

	/* Resolution.

	   Resolution of data
	*/
	Resolution string

	/* Strategy.

	   Vault Strategy Address
	*/
	Strategy *string

	/* Type.

	   Type of data
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the vaults get historical data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VaultsGetHistoricalDataParams) WithDefaults() *VaultsGetHistoricalDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the vaults get historical data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VaultsGetHistoricalDataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) WithTimeout(timeout time.Duration) *VaultsGetHistoricalDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) WithContext(ctx context.Context) *VaultsGetHistoricalDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) WithHTTPClient(client *http.Client) *VaultsGetHistoricalDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) WithAddress(address string) *VaultsGetHistoricalDataParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) SetAddress(address string) {
	o.Address = address
}

// WithResolution adds the resolution to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) WithResolution(resolution string) *VaultsGetHistoricalDataParams {
	o.SetResolution(resolution)
	return o
}

// SetResolution adds the resolution to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) SetResolution(resolution string) {
	o.Resolution = resolution
}

// WithStrategy adds the strategy to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) WithStrategy(strategy *string) *VaultsGetHistoricalDataParams {
	o.SetStrategy(strategy)
	return o
}

// SetStrategy adds the strategy to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) SetStrategy(strategy *string) {
	o.Strategy = strategy
}

// WithType adds the typeVar to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) WithType(typeVar string) *VaultsGetHistoricalDataParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the vaults get historical data params
func (o *VaultsGetHistoricalDataParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *VaultsGetHistoricalDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param address
	qrAddress := o.Address
	qAddress := qrAddress
	if qAddress != "" {

		if err := r.SetQueryParam("address", qAddress); err != nil {
			return err
		}
	}

	// query param resolution
	qrResolution := o.Resolution
	qResolution := qrResolution
	if qResolution != "" {

		if err := r.SetQueryParam("resolution", qResolution); err != nil {
			return err
		}
	}

	if o.Strategy != nil {

		// query param strategy
		var qrStrategy string

		if o.Strategy != nil {
			qrStrategy = *o.Strategy
		}
		qStrategy := qrStrategy
		if qStrategy != "" {

			if err := r.SetQueryParam("strategy", qStrategy); err != nil {
				return err
			}
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
