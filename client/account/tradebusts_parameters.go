// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTradebustsParams creates a new TradebustsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTradebustsParams() *TradebustsParams {
	return &TradebustsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTradebustsParamsWithTimeout creates a new TradebustsParams object
// with the ability to set a timeout on a request.
func NewTradebustsParamsWithTimeout(timeout time.Duration) *TradebustsParams {
	return &TradebustsParams{
		timeout: timeout,
	}
}

// NewTradebustsParamsWithContext creates a new TradebustsParams object
// with the ability to set a context for a request.
func NewTradebustsParamsWithContext(ctx context.Context) *TradebustsParams {
	return &TradebustsParams{
		Context: ctx,
	}
}

// NewTradebustsParamsWithHTTPClient creates a new TradebustsParams object
// with the ability to set a custom HTTPClient for a request.
func NewTradebustsParamsWithHTTPClient(client *http.Client) *TradebustsParams {
	return &TradebustsParams{
		HTTPClient: client,
	}
}

/*
TradebustsParams contains all the parameters to send to the API endpoint

	for the tradebusts operation.

	Typically these are written to a http.Request.
*/
type TradebustsParams struct {

	/* Cursor.

	   Returns the ‘next’ paginated page.
	*/
	Cursor *string

	/* EndAt.

	   End Time (unix time millisecond)
	*/
	EndAt *int64

	/* PageSize.

	   Limit the number of responses in the page

	   Default: 100
	*/
	PageSize *int64

	/* StartAt.

	   Start Time (unix time millisecond)
	*/
	StartAt *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the tradebusts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TradebustsParams) WithDefaults() *TradebustsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the tradebusts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TradebustsParams) SetDefaults() {
	var (
		pageSizeDefault = int64(100)
	)

	val := TradebustsParams{
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the tradebusts params
func (o *TradebustsParams) WithTimeout(timeout time.Duration) *TradebustsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tradebusts params
func (o *TradebustsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tradebusts params
func (o *TradebustsParams) WithContext(ctx context.Context) *TradebustsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tradebusts params
func (o *TradebustsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tradebusts params
func (o *TradebustsParams) WithHTTPClient(client *http.Client) *TradebustsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tradebusts params
func (o *TradebustsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the tradebusts params
func (o *TradebustsParams) WithCursor(cursor *string) *TradebustsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the tradebusts params
func (o *TradebustsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithEndAt adds the endAt to the tradebusts params
func (o *TradebustsParams) WithEndAt(endAt *int64) *TradebustsParams {
	o.SetEndAt(endAt)
	return o
}

// SetEndAt adds the endAt to the tradebusts params
func (o *TradebustsParams) SetEndAt(endAt *int64) {
	o.EndAt = endAt
}

// WithPageSize adds the pageSize to the tradebusts params
func (o *TradebustsParams) WithPageSize(pageSize *int64) *TradebustsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the tradebusts params
func (o *TradebustsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithStartAt adds the startAt to the tradebusts params
func (o *TradebustsParams) WithStartAt(startAt *int64) *TradebustsParams {
	o.SetStartAt(startAt)
	return o
}

// SetStartAt adds the startAt to the tradebusts params
func (o *TradebustsParams) SetStartAt(startAt *int64) {
	o.StartAt = startAt
}

// WriteToRequest writes these params to a swagger request
func (o *TradebustsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.EndAt != nil {

		// query param end_at
		var qrEndAt int64

		if o.EndAt != nil {
			qrEndAt = *o.EndAt
		}
		qEndAt := swag.FormatInt64(qrEndAt)
		if qEndAt != "" {

			if err := r.SetQueryParam("end_at", qEndAt); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.StartAt != nil {

		// query param start_at
		var qrStartAt int64

		if o.StartAt != nil {
			qrStartAt = *o.StartAt
		}
		qStartAt := swag.FormatInt64(qrStartAt)
		if qStartAt != "" {

			if err := r.SetQueryParam("start_at", qStartAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
