// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/trishtzy/go-paradex/models"
)

// UpdateAccountMaxSlippageReader is a Reader for the UpdateAccountMaxSlippage structure.
type UpdateAccountMaxSlippageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAccountMaxSlippageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAccountMaxSlippageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAccountMaxSlippageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAccountMaxSlippageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /account/profile/max_slippage] update-account-max-slippage", response, response.Code())
	}
}

// NewUpdateAccountMaxSlippageOK creates a UpdateAccountMaxSlippageOK with default headers values
func NewUpdateAccountMaxSlippageOK() *UpdateAccountMaxSlippageOK {
	return &UpdateAccountMaxSlippageOK{}
}

/*
UpdateAccountMaxSlippageOK describes a response with status code 200, with default header values.

OK
*/
type UpdateAccountMaxSlippageOK struct {
	Payload *models.ResponsesAccountProfileResp
}

// IsSuccess returns true when this update account max slippage o k response has a 2xx status code
func (o *UpdateAccountMaxSlippageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update account max slippage o k response has a 3xx status code
func (o *UpdateAccountMaxSlippageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update account max slippage o k response has a 4xx status code
func (o *UpdateAccountMaxSlippageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update account max slippage o k response has a 5xx status code
func (o *UpdateAccountMaxSlippageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update account max slippage o k response a status code equal to that given
func (o *UpdateAccountMaxSlippageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update account max slippage o k response
func (o *UpdateAccountMaxSlippageOK) Code() int {
	return 200
}

func (o *UpdateAccountMaxSlippageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /account/profile/max_slippage][%d] updateAccountMaxSlippageOK %s", 200, payload)
}

func (o *UpdateAccountMaxSlippageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /account/profile/max_slippage][%d] updateAccountMaxSlippageOK %s", 200, payload)
}

func (o *UpdateAccountMaxSlippageOK) GetPayload() *models.ResponsesAccountProfileResp {
	return o.Payload
}

func (o *UpdateAccountMaxSlippageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAccountProfileResp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccountMaxSlippageBadRequest creates a UpdateAccountMaxSlippageBadRequest with default headers values
func NewUpdateAccountMaxSlippageBadRequest() *UpdateAccountMaxSlippageBadRequest {
	return &UpdateAccountMaxSlippageBadRequest{}
}

/*
UpdateAccountMaxSlippageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAccountMaxSlippageBadRequest struct {
	Payload *models.ResponsesAPIError
}

// IsSuccess returns true when this update account max slippage bad request response has a 2xx status code
func (o *UpdateAccountMaxSlippageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update account max slippage bad request response has a 3xx status code
func (o *UpdateAccountMaxSlippageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update account max slippage bad request response has a 4xx status code
func (o *UpdateAccountMaxSlippageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update account max slippage bad request response has a 5xx status code
func (o *UpdateAccountMaxSlippageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update account max slippage bad request response a status code equal to that given
func (o *UpdateAccountMaxSlippageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update account max slippage bad request response
func (o *UpdateAccountMaxSlippageBadRequest) Code() int {
	return 400
}

func (o *UpdateAccountMaxSlippageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /account/profile/max_slippage][%d] updateAccountMaxSlippageBadRequest %s", 400, payload)
}

func (o *UpdateAccountMaxSlippageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /account/profile/max_slippage][%d] updateAccountMaxSlippageBadRequest %s", 400, payload)
}

func (o *UpdateAccountMaxSlippageBadRequest) GetPayload() *models.ResponsesAPIError {
	return o.Payload
}

func (o *UpdateAccountMaxSlippageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccountMaxSlippageUnauthorized creates a UpdateAccountMaxSlippageUnauthorized with default headers values
func NewUpdateAccountMaxSlippageUnauthorized() *UpdateAccountMaxSlippageUnauthorized {
	return &UpdateAccountMaxSlippageUnauthorized{}
}

/*
UpdateAccountMaxSlippageUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAccountMaxSlippageUnauthorized struct {
	Payload *models.ResponsesAPIError
}

// IsSuccess returns true when this update account max slippage unauthorized response has a 2xx status code
func (o *UpdateAccountMaxSlippageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update account max slippage unauthorized response has a 3xx status code
func (o *UpdateAccountMaxSlippageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update account max slippage unauthorized response has a 4xx status code
func (o *UpdateAccountMaxSlippageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update account max slippage unauthorized response has a 5xx status code
func (o *UpdateAccountMaxSlippageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update account max slippage unauthorized response a status code equal to that given
func (o *UpdateAccountMaxSlippageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update account max slippage unauthorized response
func (o *UpdateAccountMaxSlippageUnauthorized) Code() int {
	return 401
}

func (o *UpdateAccountMaxSlippageUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /account/profile/max_slippage][%d] updateAccountMaxSlippageUnauthorized %s", 401, payload)
}

func (o *UpdateAccountMaxSlippageUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /account/profile/max_slippage][%d] updateAccountMaxSlippageUnauthorized %s", 401, payload)
}

func (o *UpdateAccountMaxSlippageUnauthorized) GetPayload() *models.ResponsesAPIError {
	return o.Payload
}

func (o *UpdateAccountMaxSlippageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
