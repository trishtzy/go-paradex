// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/trishtzy/go-paradex/models"
)

// TransactionsReader is a Reader for the Transactions structure.
type TransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /transactions] transactions", response, response.Code())
	}
}

// NewTransactionsOK creates a TransactionsOK with default headers values
func NewTransactionsOK() *TransactionsOK {
	return &TransactionsOK{}
}

/*
TransactionsOK describes a response with status code 200, with default header values.

OK
*/
type TransactionsOK struct {
	Payload *models.ResponsesGetTransactionResponse
}

// IsSuccess returns true when this transactions o k response has a 2xx status code
func (o *TransactionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this transactions o k response has a 3xx status code
func (o *TransactionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transactions o k response has a 4xx status code
func (o *TransactionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this transactions o k response has a 5xx status code
func (o *TransactionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this transactions o k response a status code equal to that given
func (o *TransactionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the transactions o k response
func (o *TransactionsOK) Code() int {
	return 200
}

func (o *TransactionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /transactions][%d] transactionsOK %s", 200, payload)
}

func (o *TransactionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /transactions][%d] transactionsOK %s", 200, payload)
}

func (o *TransactionsOK) GetPayload() *models.ResponsesGetTransactionResponse {
	return o.Payload
}

func (o *TransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesGetTransactionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransactionsBadRequest creates a TransactionsBadRequest with default headers values
func NewTransactionsBadRequest() *TransactionsBadRequest {
	return &TransactionsBadRequest{}
}

/*
TransactionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TransactionsBadRequest struct {
	Payload *models.ResponsesAPIError
}

// IsSuccess returns true when this transactions bad request response has a 2xx status code
func (o *TransactionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this transactions bad request response has a 3xx status code
func (o *TransactionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transactions bad request response has a 4xx status code
func (o *TransactionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this transactions bad request response has a 5xx status code
func (o *TransactionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this transactions bad request response a status code equal to that given
func (o *TransactionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the transactions bad request response
func (o *TransactionsBadRequest) Code() int {
	return 400
}

func (o *TransactionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /transactions][%d] transactionsBadRequest %s", 400, payload)
}

func (o *TransactionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /transactions][%d] transactionsBadRequest %s", 400, payload)
}

func (o *TransactionsBadRequest) GetPayload() *models.ResponsesAPIError {
	return o.Payload
}

func (o *TransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
