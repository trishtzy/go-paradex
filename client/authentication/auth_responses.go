// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/trishtzy/go-paradex/models"
)

// AuthReader is a Reader for the Auth structure.
type AuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth] auth", response, response.Code())
	}
}

// NewAuthOK creates a AuthOK with default headers values
func NewAuthOK() *AuthOK {
	return &AuthOK{}
}

/*
AuthOK describes a response with status code 200, with default header values.

OK
*/
type AuthOK struct {
	Payload *models.ResponsesAuthResp
}

// IsSuccess returns true when this auth o k response has a 2xx status code
func (o *AuthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this auth o k response has a 3xx status code
func (o *AuthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth o k response has a 4xx status code
func (o *AuthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this auth o k response has a 5xx status code
func (o *AuthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this auth o k response a status code equal to that given
func (o *AuthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the auth o k response
func (o *AuthOK) Code() int {
	return 200
}

func (o *AuthOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth][%d] authOK %s", 200, payload)
}

func (o *AuthOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth][%d] authOK %s", 200, payload)
}

func (o *AuthOK) GetPayload() *models.ResponsesAuthResp {
	return o.Payload
}

func (o *AuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAuthResp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthBadRequest creates a AuthBadRequest with default headers values
func NewAuthBadRequest() *AuthBadRequest {
	return &AuthBadRequest{}
}

/*
AuthBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AuthBadRequest struct {
	Payload *models.ResponsesAPIError
}

// IsSuccess returns true when this auth bad request response has a 2xx status code
func (o *AuthBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth bad request response has a 3xx status code
func (o *AuthBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth bad request response has a 4xx status code
func (o *AuthBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth bad request response has a 5xx status code
func (o *AuthBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this auth bad request response a status code equal to that given
func (o *AuthBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the auth bad request response
func (o *AuthBadRequest) Code() int {
	return 400
}

func (o *AuthBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth][%d] authBadRequest %s", 400, payload)
}

func (o *AuthBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth][%d] authBadRequest %s", 400, payload)
}

func (o *AuthBadRequest) GetPayload() *models.ResponsesAPIError {
	return o.Payload
}

func (o *AuthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthUnauthorized creates a AuthUnauthorized with default headers values
func NewAuthUnauthorized() *AuthUnauthorized {
	return &AuthUnauthorized{}
}

/*
AuthUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AuthUnauthorized struct {
	Payload *models.ResponsesAPIError
}

// IsSuccess returns true when this auth unauthorized response has a 2xx status code
func (o *AuthUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this auth unauthorized response has a 3xx status code
func (o *AuthUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this auth unauthorized response has a 4xx status code
func (o *AuthUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this auth unauthorized response has a 5xx status code
func (o *AuthUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this auth unauthorized response a status code equal to that given
func (o *AuthUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the auth unauthorized response
func (o *AuthUnauthorized) Code() int {
	return 401
}

func (o *AuthUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth][%d] authUnauthorized %s", 401, payload)
}

func (o *AuthUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth][%d] authUnauthorized %s", 401, payload)
}

func (o *AuthUnauthorized) GetPayload() *models.ResponsesAPIError {
	return o.Payload
}

func (o *AuthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
