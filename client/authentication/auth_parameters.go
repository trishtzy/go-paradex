// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAuthParams creates a new AuthParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAuthParams() *AuthParams {
	return &AuthParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAuthParamsWithTimeout creates a new AuthParams object
// with the ability to set a timeout on a request.
func NewAuthParamsWithTimeout(timeout time.Duration) *AuthParams {
	return &AuthParams{
		timeout: timeout,
	}
}

// NewAuthParamsWithContext creates a new AuthParams object
// with the ability to set a context for a request.
func NewAuthParamsWithContext(ctx context.Context) *AuthParams {
	return &AuthParams{
		Context: ctx,
	}
}

// NewAuthParamsWithHTTPClient creates a new AuthParams object
// with the ability to set a custom HTTPClient for a request.
func NewAuthParamsWithHTTPClient(client *http.Client) *AuthParams {
	return &AuthParams{
		HTTPClient: client,
	}
}

/*
AuthParams contains all the parameters to send to the API endpoint

	for the auth operation.

	Typically these are written to a http.Request.
*/
type AuthParams struct {

	/* PARADEXAUTHORIZEISOLATEDMARKETS.

	   Optional flag to authorize all isolated market accounts linked to the main account. When set to true, the returned JWT will grant trading access to all isolated accounts. Defaults to false if not specified
	*/
	PARADEXAUTHORIZEISOLATEDMARKETS *string

	/* PARADEXSIGNATUREEXPIRATION.

	   Timestamp when signature expires (default 30 min | Max 1 week)
	*/
	PARADEXSIGNATUREEXPIRATION *string

	/* PARADEXSTARKNETACCOUNT.

	   Starknet account
	*/
	PARADEXSTARKNETACCOUNT string

	/* PARADEXSTARKNETSIGNATURE.

	   Starknet signature
	*/
	PARADEXSTARKNETSIGNATURE string

	/* PARADEXTIMESTAMP.

	   Timestamp when the signature was created
	*/
	PARADEXTIMESTAMP string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the auth params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthParams) WithDefaults() *AuthParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the auth params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the auth params
func (o *AuthParams) WithTimeout(timeout time.Duration) *AuthParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the auth params
func (o *AuthParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the auth params
func (o *AuthParams) WithContext(ctx context.Context) *AuthParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the auth params
func (o *AuthParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the auth params
func (o *AuthParams) WithHTTPClient(client *http.Client) *AuthParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the auth params
func (o *AuthParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPARADEXAUTHORIZEISOLATEDMARKETS adds the pARADEXAUTHORIZEISOLATEDMARKETS to the auth params
func (o *AuthParams) WithPARADEXAUTHORIZEISOLATEDMARKETS(pARADEXAUTHORIZEISOLATEDMARKETS *string) *AuthParams {
	o.SetPARADEXAUTHORIZEISOLATEDMARKETS(pARADEXAUTHORIZEISOLATEDMARKETS)
	return o
}

// SetPARADEXAUTHORIZEISOLATEDMARKETS adds the pARADEXAUTHORIZEISOLATEDMARKETS to the auth params
func (o *AuthParams) SetPARADEXAUTHORIZEISOLATEDMARKETS(pARADEXAUTHORIZEISOLATEDMARKETS *string) {
	o.PARADEXAUTHORIZEISOLATEDMARKETS = pARADEXAUTHORIZEISOLATEDMARKETS
}

// WithPARADEXSIGNATUREEXPIRATION adds the pARADEXSIGNATUREEXPIRATION to the auth params
func (o *AuthParams) WithPARADEXSIGNATUREEXPIRATION(pARADEXSIGNATUREEXPIRATION *string) *AuthParams {
	o.SetPARADEXSIGNATUREEXPIRATION(pARADEXSIGNATUREEXPIRATION)
	return o
}

// SetPARADEXSIGNATUREEXPIRATION adds the pARADEXSIGNATUREEXPIRATION to the auth params
func (o *AuthParams) SetPARADEXSIGNATUREEXPIRATION(pARADEXSIGNATUREEXPIRATION *string) {
	o.PARADEXSIGNATUREEXPIRATION = pARADEXSIGNATUREEXPIRATION
}

// WithPARADEXSTARKNETACCOUNT adds the pARADEXSTARKNETACCOUNT to the auth params
func (o *AuthParams) WithPARADEXSTARKNETACCOUNT(pARADEXSTARKNETACCOUNT string) *AuthParams {
	o.SetPARADEXSTARKNETACCOUNT(pARADEXSTARKNETACCOUNT)
	return o
}

// SetPARADEXSTARKNETACCOUNT adds the pARADEXSTARKNETACCOUNT to the auth params
func (o *AuthParams) SetPARADEXSTARKNETACCOUNT(pARADEXSTARKNETACCOUNT string) {
	o.PARADEXSTARKNETACCOUNT = pARADEXSTARKNETACCOUNT
}

// WithPARADEXSTARKNETSIGNATURE adds the pARADEXSTARKNETSIGNATURE to the auth params
func (o *AuthParams) WithPARADEXSTARKNETSIGNATURE(pARADEXSTARKNETSIGNATURE string) *AuthParams {
	o.SetPARADEXSTARKNETSIGNATURE(pARADEXSTARKNETSIGNATURE)
	return o
}

// SetPARADEXSTARKNETSIGNATURE adds the pARADEXSTARKNETSIGNATURE to the auth params
func (o *AuthParams) SetPARADEXSTARKNETSIGNATURE(pARADEXSTARKNETSIGNATURE string) {
	o.PARADEXSTARKNETSIGNATURE = pARADEXSTARKNETSIGNATURE
}

// WithPARADEXTIMESTAMP adds the pARADEXTIMESTAMP to the auth params
func (o *AuthParams) WithPARADEXTIMESTAMP(pARADEXTIMESTAMP string) *AuthParams {
	o.SetPARADEXTIMESTAMP(pARADEXTIMESTAMP)
	return o
}

// SetPARADEXTIMESTAMP adds the pARADEXTIMESTAMP to the auth params
func (o *AuthParams) SetPARADEXTIMESTAMP(pARADEXTIMESTAMP string) {
	o.PARADEXTIMESTAMP = pARADEXTIMESTAMP
}

// WriteToRequest writes these params to a swagger request
func (o *AuthParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PARADEXAUTHORIZEISOLATEDMARKETS != nil {

		// header param PARADEX-AUTHORIZE-ISOLATED-MARKETS
		if err := r.SetHeaderParam("PARADEX-AUTHORIZE-ISOLATED-MARKETS", *o.PARADEXAUTHORIZEISOLATEDMARKETS); err != nil {
			return err
		}
	}

	if o.PARADEXSIGNATUREEXPIRATION != nil {

		// header param PARADEX-SIGNATURE-EXPIRATION
		if err := r.SetHeaderParam("PARADEX-SIGNATURE-EXPIRATION", *o.PARADEXSIGNATUREEXPIRATION); err != nil {
			return err
		}
	}

	// header param PARADEX-STARKNET-ACCOUNT
	if err := r.SetHeaderParam("PARADEX-STARKNET-ACCOUNT", o.PARADEXSTARKNETACCOUNT); err != nil {
		return err
	}

	// header param PARADEX-STARKNET-SIGNATURE
	if err := r.SetHeaderParam("PARADEX-STARKNET-SIGNATURE", o.PARADEXSTARKNETSIGNATURE); err != nil {
		return err
	}

	// header param PARADEX-TIMESTAMP
	if err := r.SetHeaderParam("PARADEX-TIMESTAMP", o.PARADEXTIMESTAMP); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
