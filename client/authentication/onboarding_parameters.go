// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/trishtzy/go-paradex/models"
)

// NewOnboardingParams creates a new OnboardingParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewOnboardingParams() *OnboardingParams {
	return &OnboardingParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewOnboardingParamsWithTimeout creates a new OnboardingParams object
// with the ability to set a timeout on a request.
func NewOnboardingParamsWithTimeout(timeout time.Duration) *OnboardingParams {
	return &OnboardingParams{
		timeout: timeout,
	}
}

// NewOnboardingParamsWithContext creates a new OnboardingParams object
// with the ability to set a context for a request.
func NewOnboardingParamsWithContext(ctx context.Context) *OnboardingParams {
	return &OnboardingParams{
		Context: ctx,
	}
}

// NewOnboardingParamsWithHTTPClient creates a new OnboardingParams object
// with the ability to set a custom HTTPClient for a request.
func NewOnboardingParamsWithHTTPClient(client *http.Client) *OnboardingParams {
	return &OnboardingParams{
		HTTPClient: client,
	}
}

/*
OnboardingParams contains all the parameters to send to the API endpoint

	for the onboarding operation.

	Typically these are written to a http.Request.
*/
type OnboardingParams struct {

	/* PARADEXETHEREUMACCOUNT.

	   Ethereum account used to onboard
	*/
	PARADEXETHEREUMACCOUNT string

	/* PARADEXSTARKNETACCOUNT.

	   Starknet address
	*/
	PARADEXSTARKNETACCOUNT string

	/* PARADEXSTARKNETSIGNATURE.

	   Starknet signature
	*/
	PARADEXSTARKNETSIGNATURE string

	/* Request.

	   Onboarding user public_key
	*/
	Request *models.RequestsOnboarding

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the onboarding params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OnboardingParams) WithDefaults() *OnboardingParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the onboarding params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OnboardingParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the onboarding params
func (o *OnboardingParams) WithTimeout(timeout time.Duration) *OnboardingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the onboarding params
func (o *OnboardingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the onboarding params
func (o *OnboardingParams) WithContext(ctx context.Context) *OnboardingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the onboarding params
func (o *OnboardingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the onboarding params
func (o *OnboardingParams) WithHTTPClient(client *http.Client) *OnboardingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the onboarding params
func (o *OnboardingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPARADEXETHEREUMACCOUNT adds the pARADEXETHEREUMACCOUNT to the onboarding params
func (o *OnboardingParams) WithPARADEXETHEREUMACCOUNT(pARADEXETHEREUMACCOUNT string) *OnboardingParams {
	o.SetPARADEXETHEREUMACCOUNT(pARADEXETHEREUMACCOUNT)
	return o
}

// SetPARADEXETHEREUMACCOUNT adds the pARADEXETHEREUMACCOUNT to the onboarding params
func (o *OnboardingParams) SetPARADEXETHEREUMACCOUNT(pARADEXETHEREUMACCOUNT string) {
	o.PARADEXETHEREUMACCOUNT = pARADEXETHEREUMACCOUNT
}

// WithPARADEXSTARKNETACCOUNT adds the pARADEXSTARKNETACCOUNT to the onboarding params
func (o *OnboardingParams) WithPARADEXSTARKNETACCOUNT(pARADEXSTARKNETACCOUNT string) *OnboardingParams {
	o.SetPARADEXSTARKNETACCOUNT(pARADEXSTARKNETACCOUNT)
	return o
}

// SetPARADEXSTARKNETACCOUNT adds the pARADEXSTARKNETACCOUNT to the onboarding params
func (o *OnboardingParams) SetPARADEXSTARKNETACCOUNT(pARADEXSTARKNETACCOUNT string) {
	o.PARADEXSTARKNETACCOUNT = pARADEXSTARKNETACCOUNT
}

// WithPARADEXSTARKNETSIGNATURE adds the pARADEXSTARKNETSIGNATURE to the onboarding params
func (o *OnboardingParams) WithPARADEXSTARKNETSIGNATURE(pARADEXSTARKNETSIGNATURE string) *OnboardingParams {
	o.SetPARADEXSTARKNETSIGNATURE(pARADEXSTARKNETSIGNATURE)
	return o
}

// SetPARADEXSTARKNETSIGNATURE adds the pARADEXSTARKNETSIGNATURE to the onboarding params
func (o *OnboardingParams) SetPARADEXSTARKNETSIGNATURE(pARADEXSTARKNETSIGNATURE string) {
	o.PARADEXSTARKNETSIGNATURE = pARADEXSTARKNETSIGNATURE
}

// WithRequest adds the request to the onboarding params
func (o *OnboardingParams) WithRequest(request *models.RequestsOnboarding) *OnboardingParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the onboarding params
func (o *OnboardingParams) SetRequest(request *models.RequestsOnboarding) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *OnboardingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param PARADEX-ETHEREUM-ACCOUNT
	if err := r.SetHeaderParam("PARADEX-ETHEREUM-ACCOUNT", o.PARADEXETHEREUMACCOUNT); err != nil {
		return err
	}

	// header param PARADEX-STARKNET-ACCOUNT
	if err := r.SetHeaderParam("PARADEX-STARKNET-ACCOUNT", o.PARADEXSTARKNETACCOUNT); err != nil {
		return err
	}

	// header param PARADEX-STARKNET-SIGNATURE
	if err := r.SetHeaderParam("PARADEX-STARKNET-SIGNATURE", o.PARADEXSTARKNETSIGNATURE); err != nil {
		return err
	}
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
