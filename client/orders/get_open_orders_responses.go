// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/trishtzy/go-paradex/models"
)

// GetOpenOrdersReader is a Reader for the GetOpenOrders structure.
type GetOpenOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOpenOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOpenOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOpenOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /orders] get-open-orders", response, response.Code())
	}
}

// NewGetOpenOrdersOK creates a GetOpenOrdersOK with default headers values
func NewGetOpenOrdersOK() *GetOpenOrdersOK {
	return &GetOpenOrdersOK{}
}

/*
GetOpenOrdersOK describes a response with status code 200, with default header values.

OK
*/
type GetOpenOrdersOK struct {
	Payload *models.ResponsesGetOpenOrders
}

// IsSuccess returns true when this get open orders o k response has a 2xx status code
func (o *GetOpenOrdersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get open orders o k response has a 3xx status code
func (o *GetOpenOrdersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open orders o k response has a 4xx status code
func (o *GetOpenOrdersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get open orders o k response has a 5xx status code
func (o *GetOpenOrdersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get open orders o k response a status code equal to that given
func (o *GetOpenOrdersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get open orders o k response
func (o *GetOpenOrdersOK) Code() int {
	return 200
}

func (o *GetOpenOrdersOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orders][%d] getOpenOrdersOK %s", 200, payload)
}

func (o *GetOpenOrdersOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orders][%d] getOpenOrdersOK %s", 200, payload)
}

func (o *GetOpenOrdersOK) GetPayload() *models.ResponsesGetOpenOrders {
	return o.Payload
}

func (o *GetOpenOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesGetOpenOrders)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOpenOrdersBadRequest creates a GetOpenOrdersBadRequest with default headers values
func NewGetOpenOrdersBadRequest() *GetOpenOrdersBadRequest {
	return &GetOpenOrdersBadRequest{}
}

/*
GetOpenOrdersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetOpenOrdersBadRequest struct {
	Payload *models.ResponsesAPIError
}

// IsSuccess returns true when this get open orders bad request response has a 2xx status code
func (o *GetOpenOrdersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get open orders bad request response has a 3xx status code
func (o *GetOpenOrdersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get open orders bad request response has a 4xx status code
func (o *GetOpenOrdersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get open orders bad request response has a 5xx status code
func (o *GetOpenOrdersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get open orders bad request response a status code equal to that given
func (o *GetOpenOrdersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get open orders bad request response
func (o *GetOpenOrdersBadRequest) Code() int {
	return 400
}

func (o *GetOpenOrdersBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orders][%d] getOpenOrdersBadRequest %s", 400, payload)
}

func (o *GetOpenOrdersBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /orders][%d] getOpenOrdersBadRequest %s", 400, payload)
}

func (o *GetOpenOrdersBadRequest) GetPayload() *models.ResponsesAPIError {
	return o.Payload
}

func (o *GetOpenOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
