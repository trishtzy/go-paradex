// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/trishtzy/go-paradex/models"
)

// NewOrdersBatchParams creates a new OrdersBatchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewOrdersBatchParams() *OrdersBatchParams {
	return &OrdersBatchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewOrdersBatchParamsWithTimeout creates a new OrdersBatchParams object
// with the ability to set a timeout on a request.
func NewOrdersBatchParamsWithTimeout(timeout time.Duration) *OrdersBatchParams {
	return &OrdersBatchParams{
		timeout: timeout,
	}
}

// NewOrdersBatchParamsWithContext creates a new OrdersBatchParams object
// with the ability to set a context for a request.
func NewOrdersBatchParamsWithContext(ctx context.Context) *OrdersBatchParams {
	return &OrdersBatchParams{
		Context: ctx,
	}
}

// NewOrdersBatchParamsWithHTTPClient creates a new OrdersBatchParams object
// with the ability to set a custom HTTPClient for a request.
func NewOrdersBatchParamsWithHTTPClient(client *http.Client) *OrdersBatchParams {
	return &OrdersBatchParams{
		HTTPClient: client,
	}
}

/*
OrdersBatchParams contains all the parameters to send to the API endpoint

	for the orders batch operation.

	Typically these are written to a http.Request.
*/
type OrdersBatchParams struct {

	/* Params.

	   Order content
	*/
	Params []*models.RequestsOrderRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the orders batch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OrdersBatchParams) WithDefaults() *OrdersBatchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the orders batch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OrdersBatchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the orders batch params
func (o *OrdersBatchParams) WithTimeout(timeout time.Duration) *OrdersBatchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the orders batch params
func (o *OrdersBatchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the orders batch params
func (o *OrdersBatchParams) WithContext(ctx context.Context) *OrdersBatchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the orders batch params
func (o *OrdersBatchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the orders batch params
func (o *OrdersBatchParams) WithHTTPClient(client *http.Client) *OrdersBatchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the orders batch params
func (o *OrdersBatchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithParams adds the params to the orders batch params
func (o *OrdersBatchParams) WithParams(params []*models.RequestsOrderRequest) *OrdersBatchParams {
	o.SetParams(params)
	return o
}

// SetParams adds the params to the orders batch params
func (o *OrdersBatchParams) SetParams(params []*models.RequestsOrderRequest) {
	o.Params = params
}

// WriteToRequest writes these params to a swagger request
func (o *OrdersBatchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Params != nil {
		if err := r.SetBodyParam(o.Params); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
