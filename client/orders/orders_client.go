// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new orders API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new orders API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new orders API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for orders API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetOpenOrders(params *GetOpenOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOpenOrdersOK, error)

	GetOrders(params *GetOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrdersOK, error)

	OrdersBatch(params *OrdersBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersBatchCreated, error)

	OrdersCancel(params *OrdersCancelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersCancelNoContent, error)

	OrdersCancelAll(params *OrdersCancelAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersCancelAllOK, error)

	OrdersCancelByClientID(params *OrdersCancelByClientIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersCancelByClientIDNoContent, error)

	OrdersGet(params *OrdersGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersGetOK, error)

	OrdersGetByClientID(params *OrdersGetByClientIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersGetByClientIDOK, error)

	OrdersModify(params *OrdersModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersModifyOK, error)

	OrdersNew(params *OrdersNewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersNewCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetOpenOrders gets open orders

Get current user all open orders
*/
func (a *Client) GetOpenOrders(params *GetOpenOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOpenOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOpenOrdersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-open-orders",
		Method:             "GET",
		PathPattern:        "/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOpenOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOpenOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-open-orders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrders gets orders

Get current user orders filtered on attributes
*/
func (a *Client) GetOrders(params *GetOrdersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-orders",
		Method:             "GET",
		PathPattern:        "/orders-history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-orders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	OrdersBatch creates batch of orders

	[Experimental] Place a batch of orders<br>

- Valid batch size is between 1-10 order(s)<br>
- If basic validation(including signature) fails - all orders will be rejected.<br>
- Orders are queued for risk checking independently and failure of one order doesn't affect processing of another order.
*/
func (a *Client) OrdersBatch(params *OrdersBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersBatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-batch",
		Method:             "POST",
		PathPattern:        "/orders/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersBatchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-batch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrdersCancel cancels order

Cancel an existing order
*/
func (a *Client) OrdersCancel(params *OrdersCancelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersCancelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersCancelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-cancel",
		Method:             "DELETE",
		PathPattern:        "/orders/{order_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersCancelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-cancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrdersCancelAll cancels all open orders
*/
func (a *Client) OrdersCancelAll(params *OrdersCancelAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersCancelAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersCancelAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-cancel-all",
		Method:             "DELETE",
		PathPattern:        "/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersCancelAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersCancelAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-cancel-all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrdersCancelByClientID cancels open order by client order id
*/
func (a *Client) OrdersCancelByClientID(params *OrdersCancelByClientIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersCancelByClientIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersCancelByClientIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-cancel-by-client-id",
		Method:             "DELETE",
		PathPattern:        "/orders/by_client_id/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersCancelByClientIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersCancelByClientIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-cancel-by-client-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrdersGet gets order

Get an order by id. Only return orders in `OPEN` or `NEW` status.
*/
func (a *Client) OrdersGet(params *OrdersGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-get",
		Method:             "GET",
		PathPattern:        "/orders/{order_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrdersGetByClientID gets order by client id

Get an order by client id. Only returns orders in `OPEN` status.
*/
func (a *Client) OrdersGetByClientID(params *OrdersGetByClientIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersGetByClientIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersGetByClientIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-get-by-client-id",
		Method:             "GET",
		PathPattern:        "/orders/by_client_id/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersGetByClientIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersGetByClientIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-get-by-client-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	OrdersModify modifies order

	Modify an existing open order by changing its price and/or size.

The modified order maintains its original order ID.
*/
func (a *Client) OrdersModify(params *OrdersModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersModifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-modify",
		Method:             "PUT",
		PathPattern:        "/orders/{order_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersModifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersModifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-modify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrdersNew creates order

Open a new order
*/
func (a *Client) OrdersNew(params *OrdersNewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrdersNewCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrdersNewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orders-new",
		Method:             "POST",
		PathPattern:        "/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrdersNewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrdersNewCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orders-new: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
